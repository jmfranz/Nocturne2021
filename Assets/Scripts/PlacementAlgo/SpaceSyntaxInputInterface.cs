/*
 * @Author: Abbey Singh
 * This will control the screen for switching between how the space syntax values are inputted
 * Currently they can be inputted by the contour map (original method)
 * and by using a csv file generated by depthmapx (new method)
 */

using System.Collections.Generic;
using UnityEngine;

public class SpaceSyntaxInputInterface : MonoBehaviour
{
    // Use this public boolean to choose the input 
    // TRUE: input is contour map 
    // FALSE: input is csv values
    //public bool useContourMap;

    ContourMap contourMap;
    public CSVDetails CsvDetails;
    Map currentMap;

    enum SpaceSyntaxDataRetrievalMethod {ContourMap, CsvDetails}
    SpaceSyntaxDataRetrievalMethod myMethod;

    //Singleton
    private static SpaceSyntaxInputInterface _instance;
    public static SpaceSyntaxInputInterface Instance
    {
        get
        {
            if (_instance == null)
            {
                var singletonObject = GameObject.Find("Game Handler");
                _instance = singletonObject.AddComponent<SpaceSyntaxInputInterface>();
            }
            return _instance;
        }
    }

    void InitialSetUp()
    {
        myMethod = SpaceSyntaxDataRetrievalMethod.CsvDetails;
        contourMap = gameObject.GetComponent<ContourMap>();
        CsvDetails = gameObject.GetComponent<CSVDetails>();

        StandaloneSaveLoad.Instance.Load();
        string mapName = GameState.Instance.GetCurrentStoryData().MapSelected;
        currentMap = Stories.Instance.GetMap(mapName);
    }

    public bool IsUsingContourMap()
    {
        return myMethod == SpaceSyntaxDataRetrievalMethod.ContourMap;
    }

    public List<SpaceSyntaxAttributesPoint> CreatePointsList()
    {
        InitialSetUp();

        if (myMethod == SpaceSyntaxDataRetrievalMethod.ContourMap)
        {
            return contourMap.GetPointsListFromContourMap();
        }
        else
        {
            return CsvDetails.GetPointsList(currentMap.MapName);
        }
    }

    public SpaceSyntaxAttributesPoint ScaleXYForBestPoint(SpaceSyntaxAttributesPoint bestPoint)
    {
        if (myMethod == SpaceSyntaxDataRetrievalMethod.CsvDetails)
        {
            bestPoint = CsvDetails.ConvertXYtoModelScale(bestPoint, currentMap.MapWidth, currentMap.MapHeight);
        }
        else
        {
            bestPoint = contourMap.ConvertXYtoModelScale(bestPoint);
        }
        return bestPoint;
    }
}
